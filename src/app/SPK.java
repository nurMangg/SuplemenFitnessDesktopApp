/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;

import java.awt.Frame;
import java.util.List;
import javax.swing.table.DefaultTableModel;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import javax.swing.JOptionPane;

/**
 *
 * @author nishom
 */
public class SPK extends javax.swing.JFrame {

    lihatNormalisasi norm = new lihatNormalisasi(this, true);
    Object[] header1 = {"ALTERNATIF", "HARGA", "ISI", "PROTEIN", "GULA", "KALORI"};
    Object[][] data1 = null;
    DefaultTableModel model1 = new DefaultTableModel(data1, header1);

    /**
     * Creates new form SPK
     */
    public SPK() {
        initComponents();

        setLocationRelativeTo(null);
        //setExtendedState(Frame.MAXIMIZED_BOTH);
        loadKriteria();
        loadAlternatif();

        btnNorm.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKriteria = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        editSuplemen = new javax.swing.JButton();
        btnHapusAlt = new javax.swing.JButton();
        txtCari = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAlternatif = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        perhitungan = new javax.swing.JButton();
        btnNorm = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        hasilPembobotan = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        nilaiQ = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("PEMILIHAN SUPLEMEN FITNESS TERBAIK MENGGUNAKAN METODE SAW");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addContainerGap(348, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 873, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel6.setPreferredSize(new java.awt.Dimension(873, 50));

        jButton1.setText("Edit Kriteria");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jButton1)
                .addContainerGap(748, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        tblKriteria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblKriteria);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Kriteria", jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel7.setPreferredSize(new java.awt.Dimension(873, 50));

        jButton3.setText("Tambah ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        editSuplemen.setText("Edit");
        editSuplemen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSuplemenActionPerformed(evt);
            }
        });

        btnHapusAlt.setText("Hapus");
        btnHapusAlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusAltActionPerformed(evt);
            }
        });

        txtCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCariActionPerformed(evt);
            }
        });
        txtCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCariKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editSuplemen, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHapusAlt, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 336, Short.MAX_VALUE)
                .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCari)
                    .addComponent(btnHapusAlt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editSuplemen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        tblAlternatif.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblAlternatif);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Alternatif", jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel8.setPreferredSize(new java.awt.Dimension(873, 50));

        perhitungan.setText("Lakukan Perhitungan");
        perhitungan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perhitunganActionPerformed(evt);
            }
        });

        btnNorm.setText("Lihat Normalisasi");
        btnNorm.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                btnNormAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        btnNorm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNormActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(perhitungan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 441, Short.MAX_VALUE)
                .addComponent(btnNorm, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perhitungan, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(btnNorm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel5.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        hasilPembobotan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(hasilPembobotan);

        jPanel5.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel9.setPreferredSize(new java.awt.Dimension(873, 50));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(nilaiQ, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(nilaiQ, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel9, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Pembobotan", jPanel5);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void perhitunganActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perhitunganActionPerformed
        // TODO add your handling code here:
        SPK_SAW();
    }//GEN-LAST:event_perhitunganActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        tambahSuplemen tbhS = new tambahSuplemen();
        tbhS.setVisible(true);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnHapusAltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusAltActionPerformed
        // TODO add your handling code here:
        int barisDel = tblAlternatif.getSelectedRow();
        hapusAlt(barisDel);


    }//GEN-LAST:event_btnHapusAltActionPerformed

    private void txtCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCariActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtCariActionPerformed

    private void txtCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCariKeyPressed
        // TODO add your handling code here:
        String key = txtCari.getText();
        cariData(key);
    }//GEN-LAST:event_txtCariKeyPressed

    private void editSuplemenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSuplemenActionPerformed
        // TODO add your handling code here:
        int baris = tblAlternatif.getSelectedRow();
        ShowEdit(baris);


    }//GEN-LAST:event_editSuplemenActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int konfirmasi = JOptionPane.showConfirmDialog(this, "Yakin Untuk Keluar dari SPK Pemilihan Suplemen Fitness terbaik?", "Konfirmasi", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (konfirmasi == JOptionPane.YES_OPTION) {
            setDefaultCloseOperation(EXIT_ON_CLOSE);
        } else {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing

    private void btnNormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNormActionPerformed
        // TODO add your handling code here:

        norm.setVisible(true);

    }//GEN-LAST:event_btnNormActionPerformed

    private void btnNormAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_btnNormAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNormAncestorAdded

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int baris = tblKriteria.getSelectedRow();
        ShowEditKriteria(baris);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SPK().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHapusAlt;
    public static javax.swing.JButton btnNorm;
    private javax.swing.JButton editSuplemen;
    private javax.swing.JTable hasilPembobotan;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel nilaiQ;
    private javax.swing.JButton perhitungan;
    public static javax.swing.JTable tblAlternatif;
    public static javax.swing.JTable tblKriteria;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables

    public static void loadKriteria() {
        try {
            Object[][] data = null;
            Object[] header = {"ID", "KRITERIA", "BOBOT", "LABEL"};
            DefaultTableModel model = new DefaultTableModel(data, header);
            tblKriteria.setModel(model);
            int nomor = 0;
            //load data from DB
            Connection koneksi = Koneksi.konekKeDB();
            Statement st = koneksi.createStatement();
            String query = "SELECT * FROM kriteria";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id_kriteria");
                String nama = rs.getString("nama");
                String bobot = rs.getString("bobot");
                String label = rs.getString("label");

                nomor++;
                Object[] d = {nomor, nama, bobot, label};
                model.addRow(d);
            }
            koneksi.close();
        } catch (SQLException e) {

        }
    }

    public static void loadAlternatif() {
        Object[][] data = null;
        Object[] header = {"ID", "NAMA", "HARGA", "ISI", "PROTEIN", "GULA", "KALORI", "DESKRIPSI"};
        DefaultTableModel model = new DefaultTableModel(data, header);
        tblAlternatif.setModel(model);

        int nomor = 0;
        try {

            //load data from DB
            Connection koneksi = Koneksi.konekKeDB();
            Statement st = koneksi.createStatement();
            String query = "SELECT * FROM fitness";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id");
                String nama = rs.getString("nama_suplemen");
                String harga = rs.getString("harga");
                String isi = rs.getString("isi");
                String protein = rs.getString("protein");
                String gula = rs.getString("gula");
                String kalori = rs.getString("kalori");
                String deskripsi = rs.getString("info");

                nomor++;

                Object[] d = {nomor, nama, harga, isi, protein, gula, kalori, deskripsi};
                model.addRow(d);
            }
            koneksi.close();
        } catch (SQLException e) {

        }
    }

    private void SPK_SAW() {

        try {
            //List<Double> hasil_saw = new ArrayList<>();
//            Object[] header = {"NO", "ALTERNATIF", "BOBOT"};
//            Object[][] data = null;
//            DefaultTableModel model = new DefaultTableModel(data, header);
//            hasilPembobotan.setModel(model);
            int nomor = 0;

            // Mengkosogkan Tabel
            TruncateTbl("pemilihan");
            model1.getDataVector().removeAllElements();

            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM fitness";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                double harga = rs.getDouble("harga");
                double isi = rs.getDouble("isi");
                double protein = rs.getDouble("protein");
                double gula = rs.getDouble("gula");
                double kalori = rs.getDouble("kalori");

                double pembagi_harga = label("harga").equals("cost") ? min("harga") : max("harga");
                double pembagi_isi = label("isi").equals("cost") ? min("isi") : max("isi");
                double pembagi_protein = label("protein").equals("cost") ? min("protein") : max("protein");
                double pembagi_gula = label("gula").equals("cost") ? min("gula") : max("gula");
                double pembagi_kalori = label("kalori").equals("cost") ? min("kalori") : max("kalori");

                double norm_harga = label("harga").equals("cost") ? min("harga") / harga : harga / max("harga");
                double norm_isi = label("isi").equals("cost") ? min("isi") / isi : isi / max("isi");
                double norm_protein = label("protein").equals("cost") ? min("protein") / protein : protein / max("protein");
                double norm_gula = label("gula").equals("cost") ? min("gula") / gula : gula / max("gula");
                double norm_kalori = label("kalori").equals("cost") ? min("kalori") / kalori : kalori / max("kalori");

                double hasil = (bobot("harga") * norm_harga) + (bobot("isi") * norm_isi) + (bobot("protein") * norm_protein) + (bobot("gula") * norm_gula) + (bobot("kalori") * norm_kalori);
                nomor++;

                String nama_alt = rs.getString("nama_suplemen");
//                Object[] rowData = {nomor, nama_alt, hasil};

                // Ambil Tanggal dan jam Sekarang
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                LocalDateTime now = LocalDateTime.now();

                Connection c2 = Koneksi.konekKeDB();
                Statement st2 = c2.createStatement();
                String queryNorm = "INSERT INTO pemilihan VALUES(NULL,'" + nama_alt + "','" + dtf.format(now) + " ','" + hasil + "');";
                st2.executeUpdate(queryNorm);
                c2.close();

                // menampilkan hasil perhitungan ke table
                hasilSPK();
//                model.addRow(rowData);

                Object[] dataq = {nama_alt, norm_harga, norm_isi, norm_protein, norm_gula, norm_kalori};
                norm.tblNormalisasi.setModel(model1);
                model1.addRow(dataq);

            }
            c.close();

//            int column = 2;
//            Double max = Double.MIN_VALUE;
//
//            for (int i = 0; i < hasilPembobotan.getRowCount(); i++) {
//                Double value = Double.valueOf(hasilPembobotan.getValueAt(i, column).toString());
//                if (value > max) {
//                    max = value;
//                }
//
//            }
            nilaiQ.setText("Hasil Pembobotan tertinggi adalah : " + hasilPembobotan.getValueAt(0, 1) + " dengan nilai : " + hasilPembobotan.getValueAt(0, 2));

            //double max = Collections.max(hasil_saw);
            //System.out.println(max);
        } catch (SQLException e) {
        }

        btnNorm.setEnabled(true);
    }

    private double min(String kolom) {
        double min = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT MIN(" + kolom + ") AS min_kolom FROM fitness";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                min = rs.getDouble("min_kolom");
            }
            c.close();
            return min;

        } catch (SQLException e) {
        }
        return min;
    }

    private double max(String kolom) {
        double max = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT MAX(" + kolom + ") AS max_kolom FROM fitness";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                max = rs.getDouble("max_kolom");
            }
            c.close();
            return max;

        } catch (SQLException e) {
        }
        return max;
    }

    private String label(String kolom) {
        String label = "cost";
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT label FROM kriteria WHERE nama='" + kolom + "'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                label = rs.getString("label");
            }
            c.close();
            return label;

        } catch (SQLException e) {
        }
        return label;
    }

    private double bobot(String kolom) {
        double bobot = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT bobot FROM kriteria WHERE nama='" + kolom + "'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                bobot = rs.getDouble("bobot");
            }
            c.close();
            return bobot;

        } catch (SQLException e) {
        }
        return bobot;
    }

    private void cariData(String key) {
        Object[] header = {"ID", "NAMA", "HARGA", "ISI", "PROTEIN", "GULA", "KALORI", "DESKRIPSI"};
        Object[][] data = null;

        DefaultTableModel model = new DefaultTableModel(data, header);
        tblAlternatif.setModel(model);

        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            model.getDataVector().removeAllElements();
            String sql = "SELECT * FROM fitness WHERE nama_suplemen LIKE '%" + key + "%'";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                String id = rs.getString("id");
                String nama = rs.getString("nama_suplemen");
                String harga = rs.getString("harga");
                String isi = rs.getString("isi");
                String protein = rs.getString("protein");
                String gula = rs.getString("gula");
                String kalori = rs.getString("kalori");
                String deskripsi = rs.getString("info");

                Object[] d = {id, nama, harga, isi, protein, gula, kalori, deskripsi};
                model.addRow(d);

            }
            c.close();
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
//        int jumlah = model.getRowCount();
//        jumlahData.setText("Record : " + jumlah);
    }

    private void ShowEditKriteria(int baris) {
        if (baris >= 0) {
            editKriteria edtKri = new editKriteria(this, true);
            
            int idK = (int) tblKriteria.getValueAt(baris, 0);
            edtKri.noKriteria = idK;

            String namaKri = (String) tblKriteria.getValueAt(baris, 1);
            edtKri.txtKriteria.setText(namaKri);

            String bobot = (String) tblKriteria.getValueAt(baris, 2);
            edtKri.txtBobot.setText(bobot);

            String label = (String) tblKriteria.getValueAt(baris, 3);
            edtKri.txtLabel.setText(label);

            edtKri.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Pilih Data Terlebih Dahulu");
        }
    }

    private void ShowEdit(int baris) {
        if (baris >= 0) {
            editSuplemen edtSup = new editSuplemen(this, true);

            String nama = (String) tblAlternatif.getValueAt(baris, 1);
            edtSup.txteNama.setText(nama);

//            String id = (String) tblAlternatif.getValueAt(baris, 0);
//            edtSup.idQu = id;
            String harga = (String) tblAlternatif.getValueAt(baris, 2);
            edtSup.txteHarga.setText(harga);

            String isi = (String) tblAlternatif.getValueAt(baris, 3);
            edtSup.txteIsi.setText(isi);

            String protein = (String) tblAlternatif.getValueAt(baris, 4);
            edtSup.txteProtein.setText(protein);

            String gula = (String) tblAlternatif.getValueAt(baris, 5);
            edtSup.txteGula.setText(gula);

            String kalori = (String) tblAlternatif.getValueAt(baris, 6);
            edtSup.txteKalori.setText(kalori);

            String info = (String) tblAlternatif.getValueAt(baris, 7);
            edtSup.txteInfo.setText(info);

            edtSup.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Pilih Data Terlebih Dahulu");
        }
    }

    private void hapusAlt(int barisDel) {
        if (barisDel >= 0) {
//            int id_Del = (int) tblAlternatif.getValueAt(barisDel, 0);
            String nama = (String) tblAlternatif.getValueAt(barisDel, 1);
            try {
                Connection c = Koneksi.konekKeDB();
                Statement st = c.createStatement();
                String sql = "DELETE FROM fitness WHERE nama_suplemen = '" + nama + "';";
                int konfirmasi = JOptionPane.showConfirmDialog(this, "Yakin Untuk Menghapus Data?", "Konfirmasi", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (konfirmasi == JOptionPane.YES_OPTION) {
                    st.executeUpdate(sql);
                    loadAlternatif();
                    JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
                }

            } catch (Exception e) {
                System.err.println(e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Silahkan Pilih Data Terlebih Dahulu!");
        }
    }

    private void hasilSPK() {
        Object[] header = {"NO", "ALTERNATIF", "BOBOT"};
        Object[][] data = null;
        DefaultTableModel model = new DefaultTableModel(data, header);
        hasilPembobotan.setModel(model);

        int nomor = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            model.getDataVector().removeAllElements();
            String sql = "SELECT * FROM pemilihan ORDER BY hasil DESC";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                String id = rs.getString("id");
                String nama = rs.getString("nama");
                String hasil = rs.getString("hasil");

                nomor++;
                Object[] d = {nomor, nama, hasil};
                model.addRow(d);

            }
            c.close();
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }

    private void TruncateTbl(String table) {
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String sql = "TRUNCATE TABLE " + table + ";";
            st.executeUpdate(sql);
            c.close();
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }

}
